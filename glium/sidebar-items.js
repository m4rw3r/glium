initSidebarItems({"mod":[["backend",""],["debug",""],["framebuffer","Framebuffers allow you to customize the color, depth and stencil buffers you will draw on."],["index","In order to draw, you need to provide a source of indices which is used to link the vertices together into *primitives*."],["macros","Defines useful macros for glium usage."],["pixel_buffer","Pixel buffers are buffers that contain two-dimensional texture data."],["program",""],["render_buffer","A render buffer is similar to a texture, but is optimized for usage as a draw target."],["texture","A texture is an image loaded in video memory, which can be sampled in your shaders."],["uniforms","A uniform is a global variable in your program. In order to draw something, you will need to give `glium` the values of all your uniforms. Objects that implement the `Uniform` trait are  here to do that."],["vertex","Contains everything related to vertex buffers."]],"enum":[["Api","Describes an OpenGL-related API."],["BackfaceCullingMode","Describes how triangles should be filtered before the fragment processing. Backface culling is purely an optimization. If you don't know what this does, just use `CullingDisabled`."],["BlendingFunction","Function that the GPU will use for blending."],["DepthTest","The function that the GPU will use to determine whether to write over an existing pixel on the target."],["DrawError","Error that can happen while drawing."],["GliumCreationError","Error that can happen while creating a glium display."],["Handle","Handle to a shader or a program."],["LinearBlendingFactor","Indicates which value to multiply each component with."],["PolygonMode","Defines how the device should render polygons."],["ProgramCreationError","Error that can be triggered when creating a `Program`."]],"macro":[["implement_vertex!","Implements the `glium::vertex::Vertex` trait for the given type."],["uniform!","Returns an implementation-defined type which implements the `Uniform` trait."]],"fn":[["get_supported_glsl_version","Given an API version, this function returns the GLSL version that the implementation is required to support."]],"struct":[["BlitTarget","Area of a surface in pixels. Similar to a `Rect` except that dimensions can be negative."],["DrawParameters","Represents the parameters to use when drawing."],["Frame","Implementation of `Surface`, targeting the default framebuffer."],["IndexBuffer","A list of indices loaded in the graphics card's memory."],["LinearSyncFence","Prototype for a `SyncFence`."],["Program","A combination of shaders linked together."],["Rect","Area of a surface in pixels."],["SyncFence","Provides a way to wait for a server-side operation to be finished."],["Version","Describes a version."],["VertexBuffer","A list of vertices loaded in the graphics card's memory."]],"type":[["Display",""],["VertexFormat","Describes the layout of each vertex in a vertex buffer."]],"trait":[["DisplayBuild","Objects that can build a facade object."],["GlObject","Trait for objects that are OpenGL objects."],["Surface","Object that can be drawn upon."]]});